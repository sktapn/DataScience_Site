import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import numpy as np

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise por Ra√ßa/Etnia | Dashboard Social",
    page_icon="üë•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Carregar utilit√°rios de tema (mesmo c√≥digo das p√°ginas anteriores)
def load_themes():
    themes = {
        "profissional": {
            "primary": "#1E88E5",
            "secondary": "#0D47A1",
            "accent": "#E3F2FD",
            "background": "#F5F7FA",
            "card": "#FFFFFF",
            "text": "#212121",
            "text_secondary": "#757575",
            "success": "#4CAF50",
            "warning": "#FFC107",
            "error": "#F44336",
            "chart_palette": ["#1E88E5", "#26A69A", "#7E57C2", "#5C6BC0", "#66BB6A"]
        },
        "elegante": {
            "primary": "#6A1B9A",
            "secondary": "#4A148C",
            "accent": "#F3E5F5",
            "background": "#F8F5FD",
            "card": "#FFFFFF",
            "text": "#212121",
            "text_secondary": "#757575",
            "success": "#66BB6A",
            "warning": "#FFA726",
            "error": "#EF5350",
            "chart_palette": ["#6A1B9A", "#8E24AA", "#AB47BC", "#CE93D8", "#E1BEE7"]
        },
        "moderno": {
            "primary": "#00897B",
            "secondary": "#00695C",
            "accent": "#E0F2F1",
            "background": "#F5FFFD",
            "card": "#FFFFFF",
            "text": "#212121",
            "text_secondary": "#757575",
            "success": "#66BB6A",
            "warning": "#FFA726",
            "error": "#EF5350",
            "chart_palette": ["#00897B", "#26A69A", "#4DB6AC", "#80CBC4", "#B2DFDB"]
        }
    }
    return themes

# Inicializar tema na sess√£o
if 'theme' not in st.session_state:
    st.session_state['theme'] = 'profissional'

# Carregar temas
themes = load_themes()
current_theme = themes[st.session_state['theme']]

# Aplicar CSS personalizado (mesmo das p√°ginas anteriores)
st.markdown(f"""
<style>
    /* Estilos globais */
    .main {{
        background-color: {current_theme["background"]};
        padding: 1rem 2rem;
    }}
    .stApp {{
        background-color: {current_theme["background"]};
    }}
    
    /* Tipografia */
    h1, h2, h3, h4, h5, h6 {{
        color: {current_theme["text"]};
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        font-weight: 600;
    }}
    h1 {{
        font-size: 2.2rem;
        margin-bottom: 1rem;
        border-bottom: 2px solid {current_theme["primary"]};
        padding-bottom: 0.5rem;
    }}
    h2 {{
        font-size: 1.8rem;
        color: {current_theme["primary"]};
        margin-top: 1.5rem;
    }}
    h3 {{
        font-size: 1.4rem;
        color: {current_theme["secondary"]};
    }}
    p, li, div {{
        color: {current_theme["text_secondary"]};
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }}
    
    /* Cards e Containers */
    .card {{
        background-color: {current_theme["card"]};
        border-radius: 0.5rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
        border-top: 3px solid {current_theme["primary"]};
    }}
    .metric-card {{
        background-color: {current_theme["card"]};
        border-radius: 0.5rem;
        padding: 1.2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        text-align: center;
        transition: transform 0.3s ease;
    }}
    .metric-card:hover {{
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }}
    .metric-value {{
        font-size: 2rem;
        font-weight: bold;
        color: {current_theme["primary"]};
        margin: 0.5rem 0;
    }}
    .metric-title {{
        font-size: 1rem;
        color: {current_theme["text_secondary"]};
        margin-bottom: 0.5rem;
    }}
    
    /* Indicadores */
    .indicator {{
        display: inline-block;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.85rem;
        font-weight: 500;
        margin-right: 0.5rem;
    }}
    .indicator-up {{
        background-color: rgba(76, 175, 80, 0.2);
        color: #2E7D32;
    }}
    .indicator-down {{
        background-color: rgba(244, 67, 54, 0.2);
        color: #C62828;
    }}
    
    /* Filtros */
    .filter-container {{
        background-color: {current_theme["accent"]};
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }}
    
    /* Rodap√© */
    .footer {{
        text-align: center;
        padding: 1.5rem 0;
        margin-top: 3rem;
        border-top: 1px solid #eee;
        font-size: 0.9rem;
        color: {current_theme["text_secondary"]};
    }}
    
    /* Gr√°ficos e visualiza√ß√µes */
    .chart-container {{
        background-color: {current_theme["card"]};
        border-radius: 0.5rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        margin-bottom: 1.5rem;
    }}
    
    /* Tabelas */
    .dataframe {{
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem;
    }}
    .dataframe th {{
        background-color: {current_theme["primary"]};
        color: white;
        padding: 0.75rem;
        text-align: left;
    }}
    .dataframe td {{
        padding: 0.75rem;
        border-bottom: 1px solid #eee;
    }}
    .dataframe tr:hover {{
        background-color: {current_theme["accent"]};
    }}
</style>
""", unsafe_allow_html=True)

# Sidebar para navega√ß√£o e configura√ß√µes (mesmo das p√°ginas anteriores)
with st.sidebar:
    st.image("https://via.placeholder.com/150x80?text=LOGO", width=150)
    st.title("Navega√ß√£o")
    
    # Seletor de tema
    theme_options = {
        "profissional": "üîµ Profissional",
        "elegante": "üü£ Elegante",
        "moderno": "üü¢ Moderno"
    }
    
    selected_theme = st.selectbox(
        "Escolha um tema",
        options=list(theme_options.keys()),
        format_func=lambda x: theme_options[x],
        index=list(theme_options.keys()).index(st.session_state['theme'])
    )
    
    if selected_theme != st.session_state['theme']:
        st.session_state['theme'] = selected_theme
        st.rerun()
    
    st.divider()
    
    # Links de navega√ß√£o
    st.markdown("### An√°lises")
    st.page_link("Home.py", label="üìä Vis√£o Geral", icon="üè†")
    st.page_link("pages/01_An√°lise_Regional.py", label="üó∫Ô∏è An√°lise Regional", icon="üåé")
    st.page_link("pages/02_Indicadores_Desnutri√ß√£o.py", label="üçé Indicadores de Desnutri√ß√£o", icon="üìà")
    st.page_link("pages/03_An√°lise_Racial.py", label="üë• An√°lise por Ra√ßa/Etnia", icon="üë™")
    
    st.divider()
    st.markdown("### Configura√ß√µes")
    st.page_link("pages/04_Configura√ß√µes.py", label="‚öôÔ∏è Configura√ß√µes", icon="‚öôÔ∏è")
    
    st.divider()
    st.caption(f"¬© {datetime.now().year} Seu Projeto")
    st.caption("Vers√£o 1.0.0")

# Fun√ß√£o para carregar dados de exemplo
@st.cache_data
def load_sample_data():
    # Dados de exemplo - em um caso real, voc√™ carregaria de um arquivo ou API
    # Criar dados mais detalhados para an√°lise racial
    regions = ['Norte', 'Nordeste', 'Centro-Oeste', 'Sudeste', 'Sul']
    years = list(range(2018, 2023))
    races = ['Branca', 'Preta', 'Parda', 'Ind√≠gena', 'Amarela']
    
    # Criar DataFrame base
    data = []
    
    for region in regions:
        for year in years:
            for race in races:
                # Definir taxas base por ra√ßa (simulando desigualdades)
                if race == 'Branca':
                    base_rate = 5.0
                    base_pop = 120000
                elif race == 'Preta':
                    base_rate = 12.0
                    base_pop = 180000
                elif race == 'Parda':
                    base_rate = 14.0
                    base_pop = 250000
                elif race == 'Ind√≠gena':
                    base_rate = 18.0
                    base_pop = 80000
                else:  # Amarela
                    base_rate = 4.0
                    base_pop = 50000
                
                # Ajustar por regi√£o
                if region == 'Nordeste':
                    regional_factor = 1.4
                elif region == 'Norte':
                    regional_factor = 1.3
                elif region == 'Centro-Oeste':
                    regional_factor = 1.1
                elif region == 'Sudeste':
                    regional_factor = 0.9
                else:  # Sul
                    regional_factor = 0.8
                
                # Ajustar por ano (melhoria gradual)
                yearly_reduction = 0.05 * (year - 2018)
                
                # Calcular taxa final
                rate = base_rate * regional_factor * (1 - yearly_reduction)
                
                # Calcular popula√ß√£o afetada
                pop_affected = int(base_pop * regional_factor * (1 - 0.03 * (year - 2018)))
                
                # Adicionar dados
                data.append({
                    'Regi√£o': region,
                    'Ano': year,
                    'Ra√ßa': race,
                    'Taxa_Desnutri√ß√£o': rate,
                    'Popula√ß√£o_Afetada': pop_affected,
                    'Acesso_Sa√∫de': 85 - (base_rate * 2),
                    'Renda_M√©dia': 2500 - (base_rate * 100),
                    'Escolaridade_M√©dia': 10 - (base_rate * 0.2),
                    'Acesso_Saneamento': 90 - (base_rate * 2.5)
                })
    
    return pd.DataFrame(data)

# Carregar dados
df = load_sample_data()

# Cabe√ßalho da p√°gina
st.markdown('<div class="page-header">', unsafe_allow_html=True)
st.markdown('<h1 class="page-title">An√°lise por Ra√ßa/Etnia</h1>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Filtros
st.markdown('<div class="filter-container">', unsafe_allow_html=True)
col1, col2, col3 = st.columns(3)

with col1:
    selected_year = st.select_slider(
        "Selecione o ano",
        options=sorted(df['Ano'].unique()),
        value=df['Ano'].max()
    )

with col2:
    selected_regions = st.multiselect(
        "Selecione as regi√µes",
        options=df['Regi√£o'].unique(),
        default=df['Regi√£o'].unique()
    )

with col3:
    selected_races = st.multiselect(
        "Selecione as ra√ßas/etnias",
        options=df['Ra√ßa'].unique(),
        default=df['Ra√ßa'].unique()
    )

st.markdown('</div>', unsafe_allow_html=True)

# Filtrar dados
filtered_df = df[
    (df['Ano'] == selected_year) & 
    (df['Regi√£o'].isin(selected_regions)) &
    (df['Ra√ßa'].isin(selected_races))
]

# Vis√£o geral dos indicadores por ra√ßa/etnia
st.markdown("## Panorama por Ra√ßa/Etnia")

# Gr√°fico de barras para taxa de desnutri√ß√£o por ra√ßa
fig = px.bar(
    filtered_df.groupby('Ra√ßa')['Taxa_Desnutri√ß√£o'].mean().reset_index().sort_values('Taxa_Desnutri√ß√£o', ascending=False),
    x='Ra√ßa',
    y='Taxa_Desnutri√ß√£o',
    color='Ra√ßa',
    color_discrete_sequence=current_theme["chart_palette"],
    title=f'Taxa de Desnutri√ß√£o por Ra√ßa/Etnia ({selected_year})'
)

fig.update_layout(
    height=400,
    xaxis_title='Ra√ßa/Etnia',
    yaxis_title='Taxa de Desnutri√ß√£o (%)',
    showlegend=False,
    font=dict(family="Segoe UI", size=12),
    plot_bgcolor='rgba(0,0,0,0)',
    yaxis=dict(gridcolor='rgba(0,0,0,0.1)'),
)

# Adicionar r√≥tulos de valor
fig.update_traces(texttemplate='%{y:.1f}%', textposition='outside')

st.plotly_chart(fig, use_container_width=True)

# M√©tricas principais
col1, col2, col3, col4 = st.columns(4)

# Encontrar ra√ßa com maior taxa
max_race_data = filtered_df.groupby('Ra√ßa')['Taxa_Desnutri√ß√£o'].mean().reset_index()
max_race = max_race_data.loc[max_race_data['Taxa_Desnutri√ß√£o'].idxmax()]

# Encontrar ra√ßa com menor taxa
min_race = max_race_data.loc[max_race_data['Taxa_Desnutri√ß√£o'].idxmin()]

# Calcular disparidade
disparity = max_race['Taxa_Desnutri√ß√£o'] / min_race['Taxa_Desnutri√ß√£o']

with col1:
    st.markdown('<div class="metric-card">', unsafe_allow_html=True)
    st.markdown('<div class="metric-title">Ra√ßa Mais Afetada</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="metric-value">{max_race["Ra√ßa"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="indicator indicator-down">{max_race["Taxa_Desnutri√ß√£o"]:.1f}%</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="metric-card">', unsafe_allow_html=True)
    st.markdown('<div class="metric-title">Ra√ßa Menos Afetada</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="metric-value">{min_race["Ra√ßa"]}</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="indicator indicator-up">{min_race["Taxa_Desnutri√ß√£o"]:.1f}%</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

with col3:
    st.markdown('<div class="metric-card">', unsafe_allow_html=True)
    st.markdown('<div class="metric-title">Disparidade Racial</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="metric-value">{disparity:.1f}x</div>', unsafe_allow_html=True)
    st.markdown('<div class="indicator indicator-down">Diferen√ßa entre extremos</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

with col4:
    # Popula√ß√£o total afetada
    total_affected = filtered_df['Popula√ß√£o_Afetada'].sum()
    
    # Comparar com ano anterior
    prev_year_data = df[
        (df['Ano'] == selected_year - 1) & 
        (df['Regi√£o'].isin(selected_regions)) &
        (df['Ra√ßa'].isin(selected_races))
    ]
    prev_total = prev_year_data['Popula√ß√£o_Afetada'].sum() if not prev_year_data.empty else 0
    
    if prev_total > 0:
        change = ((total_affected - prev_total) / prev_total) * 100
    else:
        change = 0
    
    st.markdown('<div class="metric-card">', unsafe_allow_html=True)
    st.markdown('<div class="metric-title">Popula√ß√£o Total Afetada</div>', unsafe_allow_html=True)
    st.markdown(f'<div class="metric-value">{total_affected:,.0f}</div>', unsafe_allow_html=True)
    
    if change < 0:
        st.markdown(f'<div class="indicator indicator-up">‚ñº {abs(change):.1f}%</div>', unsafe_allow_html=True)
    else:
        st.markdown(f'<div class="indicator indicator-down">‚ñ≤ {change:.1f}%</div>', unsafe_allow_html=True)
    st.markdown('</div>', unsafe_allow_html=True)

# An√°lise por regi√£o e ra√ßa
st.markdown("## An√°lise Cruzada: Regi√£o x Ra√ßa/Etnia")

# Abas para diferentes visualiza√ß√µes
tab1, tab2 = st.tabs(["Compara√ß√£o Regional", "Tend√™ncia Temporal"])

with tab1:
    # Gr√°fico de barras agrupadas
    region_race_df = filtered_df.groupby(['Regi√£o', 'Ra√ßa'])['Taxa_Desnutri√ß√£o'].mean().reset_index()
    
    fig = px.bar(
        region_race_df,
        x='Regi√£o',
        y='Taxa_Desnutri√ß√£o',
        color='Ra√ßa',
        barmode='group',
        color_discrete_sequence=current_theme["chart_palette"],
        title=f'Taxa de Desnutri√ß√£o por Regi√£o e Ra√ßa/Etnia ({selected_year})'
    )
    
    fig.update_layout(
        height=500,
        xaxis_title='Regi√£o',
        yaxis_title='Taxa de Desnutri√ß√£o (%)',
        legend_title='Ra√ßa/Etnia',
        font=dict(family="Segoe UI", size=12),
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis=dict(gridcolor='rgba(0,0,0,0.1)'),
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Mapa de calor
    st.markdown("### Mapa de Calor: Intensidade da Desnutri√ß√£o por Regi√£o e Ra√ßa")
    
    # Criar dados para o mapa de calor
    heatmap_df = filtered_df.pivot_table(
        index='Regi√£o', 
        columns='Ra√ßa', 
        values='Taxa_Desnutri√ß√£o', 
        aggfunc='mean'
    )
    
    # Criar mapa de calor
    fig = px.imshow(
        heatmap_df,
        text_auto='.1f',
        color_continuous_scale=px.colors.sequential.Reds,
        title=f'Mapa de Calor: Taxa de Desnutri√ß√£o por Regi√£o e Ra√ßa ({selected_year})'
    )
    
    fig.update_layout(
        height=450,
        xaxis_title='Ra√ßa/Etnia',
        yaxis_title='Regi√£o',
        font=dict(family="Segoe UI", size=12),
        coloraxis_colorbar=dict(title="Taxa (%)"),
    )
    
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    # Gr√°fico de linha para tend√™ncia temporal por ra√ßa
    # Filtrar dados para as regi√µes selecionadas (todos os anos)
    trend_df = df[
        (df['Regi√£o'].isin(selected_regions)) &
        (df['Ra√ßa'].isin(selected_races))
    ]
    
    # Agrupar por ano e ra√ßa
    yearly_race_data = trend_df.groupby(['Ano', 'Ra√ßa'])['Taxa_Desnutri√ß√£o'].mean().reset_index()
    
    # Criar gr√°fico de linha
    fig = px.line(
        yearly_race_data,
        x='Ano',
        y='Taxa_Desnutri√ß√£o',
        color='Ra√ßa',
        markers=True,
        color_discrete_sequence=current_theme["chart_palette"],
        title='Evolu√ß√£o da Taxa de Desnutri√ß√£o por Ra√ßa/Etnia ao Longo do Tempo'
    )
    
    # Configurar layout
    fig.update_layout(
        height=500,
        xaxis_title='Ano',
        yaxis_title='Taxa de Desnutri√ß√£o (%)',
        legend_title='Ra√ßa/Etnia',
        font=dict(family="Segoe UI", size=12),
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis=dict(gridcolor='rgba(0,0,0,0.1)'),
        xaxis=dict(gridcolor='rgba(0,0,0,0.1)')
    )
    
    # Adicionar r√≥tulos de dados para o √∫ltimo ano
    for race in selected_races:
        race_data = yearly_race_data[yearly_race_data['Ra√ßa'] == race]
        if not race_data.empty:
            last_year_data = race_data[race_data['Ano'] == race_data['Ano'].max()]
            if not last_year_data.empty:
                fig.add_annotation(
                    x=last_year_data['Ano'].values[0],
                    y=last_year_data['Taxa_Desnutri√ß√£o'].values[0],
                    text=f"{last_year_data['Taxa_Desnutri√ß√£o'].values[0]:.1f}%",
                    showarrow=False,
                    xshift=10,
                    font=dict(size=10)
                )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Gr√°fico de √°rea para popula√ß√£o afetada ao longo do tempo
    # Agrupar por ano e ra√ßa
    pop_trend = trend_df.groupby(['Ano', 'Ra√ßa'])['Popula√ß√£o_Afetada'].sum().reset_index()
    
    # Criar gr√°fico de √°rea
    fig = px.area(
        pop_trend,
        x='Ano',
        y='Popula√ß√£o_Afetada',
        color='Ra√ßa',
        title='Evolu√ß√£o da Popula√ß√£o Afetada por Ra√ßa/Etnia',
        color_discrete_sequence=current_theme["chart_palette"]
    )
    
    fig.update_layout(
        height=500,
        xaxis_title='Ano',
        yaxis_title='Popula√ß√£o Afetada',
        legend_title='Ra√ßa/Etnia',
        font=dict(family="Segoe UI", size=12),
        plot_bgcolor='rgba(0,0,0,0)',
        yaxis=dict(gridcolor='rgba(0,0,0,0.1)'),
        xaxis=dict(gridcolor='rgba(0,0,0,0.1)')
    )
    
    st.plotly_chart(fig, use_container_width=True)

# Fatores socioecon√¥micos
st.markdown("## Fatores Socioecon√¥micos por Ra√ßa/Etnia")

# Gr√°fico de radar para compara√ß√£o de fatores socioecon√¥micos
st.markdown("### Compara√ß√£o de Indicadores Socioecon√¥micos por Ra√ßa/Etnia")

# Preparar dados para o gr√°fico de radar
radar_df = filtered_df.groupby('Ra√ßa').agg({
    'Acesso_Sa√∫de': 'mean',
    'Renda_M√©dia': 'mean',
    'Escolaridade_M√©dia': 'mean',
    'Acesso_Saneamento': 'mean',
    'Taxa_Desnutri√ß√£o': 'mean'
}).reset_index()

# Criar gr√°fico de radar
fig = go.Figure()

# Categorias para o radar
categories = ['Acesso √† Sa√∫de', 'Renda M√©dia', 'Escolaridade', 'Saneamento', 'Taxa de Desnutri√ß√£o*']

# Adicionar uma linha para cada ra√ßa
for i, race in enumerate(radar_df['Ra√ßa']):
    race_data = radar_df[radar_df['Ra√ßa'] == race]
    
    # Normalizar os dados para uma escala de 0-100
    # Para Taxa_Desnutri√ß√£o, invertemos a escala (menor √© melhor)
    values = [
        race_data['Acesso_Sa√∫de'].values[0],
        race_data['Renda_M√©dia'].values[0] / 25,  # Normalizar para escala 0-100
        race_data['Escolaridade_M√©dia'].values[0] * 10,  # Normalizar para escala 0-100
        race_data['Acesso_Saneamento'].values[0],
        100 - race_data['Taxa_Desnutri√ß√£o'].values[0] * 5  # Inverter e normalizar
    ]
    
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name=race,
        line_color=current_theme["chart_palette"][i % len(current_theme["chart_palette"])],
        opacity=0.7
    ))

fig.update_layout(
    polar=dict(
        radialaxis=dict(
            visible=True,
            range=[0, 100]
        )
    ),
    showlegend=True,
    title='Compara√ß√£o de Indicadores Socioecon√¥micos por Ra√ßa/Etnia',
    height=600,
    font=dict(family="Segoe UI", size=12),
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=-0.1,
        xanchor="center",
        x=0.5
    )
)

st.plotly_chart(fig, use_container_width=True)
st.caption("* Para Taxa de Desnutri√ß√£o, a escala foi invertida (valores mais altos indicam menor taxa)")

# Correla√ß√£o entre fatores socioecon√¥micos e desnutri√ß√£o
st.markdown("### Correla√ß√£o entre Fatores Socioecon√¥micos e Desnutri√ß√£o")

# Selecionar fator para an√°lise
factor_options = {
    "Renda_M√©dia": "Renda M√©dia",
    "Escolaridade_M√©dia": "Escolaridade M√©dia (anos)",
    "Acesso_Sa√∫de": "Acesso √† Sa√∫de (%)",
    "Acesso_Saneamento": "Acesso a Saneamento (%)"
}

selected_factor = st.selectbox(
    "Selecione o fator socioecon√¥mico",
    options=list(factor_options.keys()),
    format_func=lambda x: factor_options[x]
)

# Gr√°fico de dispers√£o
fig = px.scatter(
    filtered_df,
    x=selected_factor,
    y='Taxa_Desnutri√ß√£o',
    color='Ra√ßa',
    size='Popula√ß√£o_Afetada',
    hover_name='Regi√£o',
    color_discrete_sequence=current_theme["chart_palette"],
    size_max=50,
    opacity=0.7,
    title=f'Rela√ß√£o entre {factor_options[selected_factor]} e Taxa de Desnutri√ß√£o'
)

# Adicionar linha de tend√™ncia
fig.update_layout(
    height=500,
    xaxis_title=factor_options[selected_factor],
    yaxis_title='Taxa de Desnutri√ß√£o (%)',
    font=dict(family="Segoe UI", size=12),
    plot_bgcolor='rgba(0,0,0,0)',
    xaxis=dict(gridcolor='rgba(0,0,0,0.1)'),
    yaxis=dict(gridcolor='rgba(0,0,0,0.1)'),
)

# Adicionar linha de tend√™ncia
fig.update_traces(marker=dict(line=dict(width=1, color='white')))

# Adicionar linha de tend√™ncia para cada ra√ßa
for race in selected_races:
    race_df = filtered_df[filtered_df['Ra√ßa'] == race]
    if len(race_df) > 1:  # Precisa de pelo menos 2 pontos para uma linha de tend√™ncia
        fig.add_trace(
            go.Scatter(
                x=race_df[selected_factor],
                y=race_df['Taxa_Desnutri√ß√£o'],
                mode='lines',
                name=f'Tend√™ncia - {race}',
                line=dict(dash='dash', width=1),
                showlegend=False
            )
        )

st.plotly_chart(fig, use_container_width=True)

# Tabela de resumo
st.markdown("## Resumo dos Indicadores por Ra√ßa/Etnia")

# Preparar dados para a tabela
summary_data = filtered_df.groupby('Ra√ßa').agg({
    'Taxa_Desnutri√ß√£o': 'mean',
    'Popula√ß√£o_Afetada': 'sum',
    'Acesso_Sa√∫de': 'mean',
    'Renda_M√©dia': 'mean',
    'Escolaridade_M√©dia': 'mean',
    'Acesso_Saneamento': 'mean'
}).reset_index()

# Formatar valores
summary_data['Taxa_Desnutri√ß√£o'] = summary_data['Taxa_Desnutri√ß√£o'].apply(lambda x: f"{x:.1f}%")
summary_data['Popula√ß√£o_Afetada'] = summary_data['Popula√ß√£o_Afetada'].apply(lambda x: f"{x:,.0f}")
summary_data['Acesso_Sa√∫de'] = summary_data['Acesso_Sa√∫de'].apply(lambda x: f"{x:.1f}%")
summary_data['Renda_M√©dia'] = summary_data['Renda_M√©dia'].apply(lambda x: f"R$ {x:,.2f}")
summary_data['Escolaridade_M√©dia'] = summary_data['Escolaridade_M√©dia'].apply(lambda x: f"{x:.1f} anos")
summary_data['Acesso_Saneamento'] = summary_data['Acesso_Saneamento'].apply(lambda x: f"{x:.1f}%")

# Renomear colunas para exibi√ß√£o
summary_data = summary_data.rename(columns={
    'Taxa_Desnutri√ß√£o': 'Taxa de Desnutri√ß√£o',
    'Popula√ß√£o_Afetada': 'Popula√ß√£o Afetada',
    'Acesso_Sa√∫de': 'Acesso √† Sa√∫de',
    'Renda_M√©dia': 'Renda M√©dia',
    'Escolaridade_M√©dia': 'Escolaridade',
    'Acesso_Saneamento': 'Acesso a Saneamento'
})

# Exibir tabela
st.dataframe(
    summary_data,
    use_container_width=True,
    hide_index=True
)

# Insights e recomenda√ß√µes
st.markdown("## Insights e Recomenda√ß√µes")

with st.container():
    st.markdown('<div class="card">', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Principais Descobertas")
        st.markdown("""
        - Existe uma disparidade significativa nas taxas de desnutri√ß√£o entre diferentes grupos raciais
        - A popula√ß√£o ind√≠gena apresenta as maiores taxas de desnutri√ß√£o em todas as regi√µes
        - H√° uma forte correla√ß√£o entre renda m√©dia, escolaridade e taxas de desnutri√ß√£o
        - A disparidade racial √© mais acentuada nas regi√µes Norte e Nordeste
        - O acesso a saneamento b√°sico √© um fator determinante para as taxas de desnutri√ß√£o
        """)
    
    with col2:
        st.markdown("### Recomenda√ß√µes")
        st.markdown("""
        - Desenvolver pol√≠ticas p√∫blicas espec√≠ficas para popula√ß√µes ind√≠genas e comunidades tradicionais
        - Implementar programas de seguran√ßa alimentar com foco em equidade racial
        - Ampliar o acesso √† educa√ß√£o e sa√∫de em comunidades vulner√°veis
        - Criar indicadores de monitoramento que considerem o recorte racial
        - Promover pesquisas e estudos sobre os determinantes sociais da desnutri√ß√£o com enfoque racial
        """)
    
    st.markdown('</div>', unsafe_allow_html=True)

# Rodap√©
st.markdown('<div class="footer">', unsafe_allow_html=True)
st.markdown(f"¬© {datetime.now().year} Dashboard de An√°lise Social | Desenvolvido com Streamlit", unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)
